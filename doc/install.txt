arpackpp installation notes.

The arpackpp library consists of header files and can be
installed without compiling. However, to compile the examples
or a program that includes these headers, it is necessary to
install some libraries.

  - System Libraries: GFORTRAN, BLAS, LAPACK, ARPACK
  
  These libraries can be installed via a package manager: 
  gfortran libopenblas-dev liblapack-dev libarpack2-dev

  - BLAS (fortan):
  
  Alternatively OpenBLAS can be obtained from GitHub:
  https://github.com/xianyi/OpenBLAS
  The script "install-openblas.sh" will install OpenBLAS into
  the external directory.

  - ARPACK (fortran):
  
  The actively maintained "new generation" package from GitHub
  https://github.com/opencollab/arpack-ng
  can be installed via "install-arpack-ng.sh" into the external
  directory. 

  The BLAS and LAPACK routines required by the ARPACK FORTRAN 
  package are distributed along with the software. 

  Most classes defined by arpackpp do not require BLAS and LAPACK 
  routines other than those distributed with ARPACK (classes for
  band and dense matrices are the only exception). 
  However, many examples included in the arpackpp "examples" 
  directory require some routines from these two packages that 
  are NOT included in the ARPACK library.

  Since arpackpp is a collection of class templates in c++ (which
  means that one can install it without compiling even a single
  file), and since one should use vendor-optimized versions of
  the BLAS and LAPACK if they are available, these libraries were 
  not included in the ARPACK++ distribution. 

  LAPACK can be obtained from the URL: http://www.netlib.org/lapack/.
  The BLAS is included in the LAPACK distribution.
  The LAPACK library on your system must be the public release (the
  current release is version 3.0). Since LAPACK includes a subset of 
  the BLAS files, the user must take some care while installing this 
  libraries to avoid code duplication.

  - SUPERLU (version 5.0):

  When installing SuperLU, the user must specify what BLAS library
  is used in the "make.inc" file.
  The script "install-superlu.sh" downloads and installs SuperLU5.0
  from http://crd-legacy.lbl.gov/~xiaoye/SuperLU/superlu_5.0.tar.gz
  into the external directory. It will search for BLAS in the 
  external directory. Pass the environmeht variable BLAS=SYSTEM to 
  use the system BLAS.

  - UMFPACK and CHOLMOD:
  
  These libraries are now part of the SuiteSparse package
  http://faculty.cse.tamu.edu/davis/SuiteSparse/SuiteSparse-4.4.5.tar.gz
  The script "install-suitesparse.sh" installs these together with 
  the METIS package from 
  http://glaros.dtc.umn.edu/gkhome/fetch/sw/metis/OLD/metis-4.0.3.tar.gz
  into the external directory.


  - Compile arpackpp Examples:
  
  To compile the examples use cmake, e.g. from the arpackpp directory: 
  mkdir build
  cd build
  cmake -D SUPERLU=ON ..
  
  This assumes SuperLU is installed and will compile also the SuperLU 
  examples. This will first find the system BLAS and use it. To point
  cmake to OpenBLAS do:
  cmake -D SUPERLU=ON -D BLAS_goto2_LIBRARY=../external/libopenblas.a
  
  Compilation of CHOLMOD and UMFPACK examples can be switched-on via:
  -D CHOLMOD=ON -D UMFPACK=ON
  
  You can also use ccmake instead of cmake to see all variables and
  manually overwrite specific paths to ensure the right libraries
  are being used.
  
  Have fun ...
  
  


  The following details on UMFPACK were supplied originally. It is
  unclear if are still relevant:
  
  Presently, the UMFPACK library does not allow the user to supply
  matrices in compress sparse column (CSC) format, but only matrices 
  in coordinate format. However, once supplied, the matrix is 
  converted internally by the package to the CSC format. 

  Since arpack++ stores matrices in csc format, a few modifications 
  on the UMFPACK code are needed in order to compatibilize the 
  libraries. These modifications are listed below.

  1) If single precision real matrices are to be used, it is
     necessary to comment out lines 579 and 580 of the ums2fa.f file
     (to avoid calling subroutine UMS2CO from UMS2FA).
  2) If double precision real matrices are to be used, it is
     necessary to comment out lines 579 and 580 of the umd2fa.f file
     (to avoid calling subroutine UMD2CO from UMD2FA).
  3) If single precision complex matrices are to be used, it is
     necessary to comment out lines 582 and 583 of the umc2fa.f file
     (to avoid calling subroutine UMC2CO from UMC2FA).
  4) If double precision complex matrices are to be used, it is
     necessary to comment out lines 582 and 583 of the umz2fa.f file
     (to avoid calling subroutine UMZ2CO from UMZ2FA).
  
  

